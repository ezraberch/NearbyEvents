//
//  EventfulWorker.swift
//  NearbyEvents
//
//  Created by Ezra Berch on 12/31/18.
//  Copyright (c) 2018 Ezra Berch. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Alamofire

struct Event: Codable {
    var id: String
    var url: URL
    var title: String
    var description: String?
    var latitude: String
    var longitude: String
    var start_time: String
    var stop_time: String?
}

struct Events: Codable {
    var event: [Event]
}

struct EventfulResponse: Codable {
    //var events: [Event]
    var total_items: String
    var events: Events?
}


//API Note:
//Currently. while this API does support SSL, it does not support all of what Apple requires by default.
//As a result, it is necessary to relax the security requirements in Info.plist, though it is not necessary to remove them entirely.
//Therefore, this application does not and should not use any API features which should be expected to be secure.

class EventfulWorker
{
    
    struct Constants {
        static let baseURL = "https://api.eventful.com/json"
        static let api_key = "sB4QwKKtMs7bpKnX"
        
        struct Keys {
            static let api_key = "app_key"
            static let location = "location"
            static let within = "within"
            static let page_size = "page_size"
            static let search = "keywords"
        }
    }
    
    enum Router : URLRequestConvertible {
        case events(latitude: Double, longitude: Double, miles: Int, search: String?)
        
        private var method: HTTPMethod {
            switch self {
            case .events:
                return .get
            }
        }
        
        private var path: String {
            switch self {
            case .events:
                return "/events/search"
            }
        }
        
        private var parameters: Parameters? {
            switch self {
            case .events (let latitude, let longitude, let miles, let search):
                var params = [Constants.Keys.location: "\(latitude), \(longitude)", Constants.Keys.within: miles] as [String : Any]
                if search != nil {
                    params[Constants.Keys.search] = search
                }
                return params
            }
        }
        
        func asURLRequest() throws -> URLRequest {
            let url = try Constants.baseURL.asURL()
            var request = URLRequest(url: url.appendingPathComponent(path))
            
            request.httpMethod = method.rawValue
            
            var fullParameters = parameters!
            fullParameters[Constants.Keys.api_key] = Constants.api_key
            fullParameters[Constants.Keys.page_size] = 50
            
            /*if let parameters = parameters {
                do {
                    request.httpBody = try JSONSerialization.data(withJSONObject: parameters, options: [])
                } catch {
                    throw AFError.parameterEncoderFailed(reason: .encoderFailed(error: error))
                }
            }*/
            
            return try URLEncoding.default.encode(request, with: fullParameters)
        }
    }
    
    static func eventSearch(latitude: Double, longitude: Double, miles: Int, search: String?, completion: @escaping (Result<EventfulResponse>) -> Void)
    {
        
        AF.request(Router.events(latitude: latitude, longitude: longitude, miles: miles, search: search)).responseDecodable { (response: DataResponse<EventfulResponse>) in
                completion(response.result)
            }
    }
}
