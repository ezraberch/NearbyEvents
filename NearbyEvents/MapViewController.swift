//
//  MapViewController.swift
//  NearbyEvents
//
//  Created by Ezra Berch on 12/31/18.
//  Copyright (c) 2018 Ezra Berch. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import MapKit

protocol MapDisplayLogic: class
{
    func centerMap(viewModel: Map.ConfigureMap.ViewModel)
    func displayEvents(viewModel: Map.GetEvents.ViewModel)
}

class MapViewController: UIViewController, MapDisplayLogic
{
    var interactor: MapBusinessLogic?
    var router: (NSObjectProtocol & MapRoutingLogic & MapDataPassing)?
    
    var events: [String:Event] = [:]
    
    @IBOutlet weak var map: MKMapView!
    @IBOutlet weak var searchBar: UISearchBar!
    @IBOutlet weak var busy: UIActivityIndicatorView!
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = MapInteractor()
        let presenter = MapPresenter()
        let router = MapRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        busy.startAnimating()
        configureMap()
        searchBar.delegate = self
    }
    
    // MARK: Do something
    
    //@IBOutlet weak var nameTextField: UITextField!
    
    func configureMap()
    {
        let request = Map.ConfigureMap.Request()
        interactor?.configureMap(request: request)
    }
    
    func centerMap(viewModel: Map.ConfigureMap.ViewModel)
    {
        map.delegate = self
        map.region = viewModel.region
    }
    
    func displayEvents(viewModel: Map.GetEvents.ViewModel) {
        //map.removeAnnotations(map.annotations)
        if viewModel.error {
            let alert = UIAlertController(title: "Error", message: "Error fetching events. Check your network connection and try again", preferredStyle: .alert)
            alert.addAction(UIAlertAction(title: "OK", style: .default, handler: nil))
            self.present(alert, animated: true, completion: nil)
            busy.stopAnimating()
            return
        }
        if viewModel.events == nil {
            let alert = UIAlertController(title: "Error", message: "No results found. Try a wider area or a different search term.", preferredStyle: .alert)
            alert.addAction(UIAlertAction(title: "OK", style: .default, handler: nil))
            self.present(alert, animated: true, completion: nil)
            busy.stopAnimating()
            return
        }
        for event in viewModel.events! {
            if events[event.id] == nil {
                events[event.id] = event
                let annotation = EventAnnotation(id: event.id)
                annotation.coordinate = CLLocationCoordinate2D(latitude: Double(event.latitude)!, longitude: Double(event.longitude)!)
                annotation.title = event.title
                annotation.subtitle = event.description
                map.addAnnotation(annotation)
            }
        }
        busy.stopAnimating()
    }
    
    func search() {
        busy.startAnimating()
        searchBar.resignFirstResponder()
        let latitudeDelta = map.region.span.latitudeDelta
        let longitudeDelta = map.region.span.longitudeDelta
        let delta = (pow(latitudeDelta/2,2)+pow(longitudeDelta, 2)).squareRoot()
        let request = Map.GetEvents.Request(latitude: map.centerCoordinate.latitude, longitude: map.centerCoordinate.longitude, miles: Int(delta * 69.0)+1, search: searchBar.text)
        interactor?.getEvents(request: request)
    }
}

extension MapViewController : MKMapViewDelegate {
    func mapView(_ mapView: MKMapView, regionDidChangeAnimated animated: Bool) {
        search()
    }
    
    func mapView(_ mapView: MKMapView, viewFor annotation: MKAnnotation) -> MKAnnotationView? {
        guard annotation is MKPointAnnotation else {
            return nil
        }
        
        let id = "eventPin"
        var annotationView = mapView.dequeueReusableAnnotationView(withIdentifier: id)
        
        if annotationView == nil {
            annotationView = MKPinAnnotationView(annotation: annotation, reuseIdentifier: id)
            annotationView!.canShowCallout = true
            annotationView!.rightCalloutAccessoryView = UIButton(type: .detailDisclosure)
        } else {
            annotationView?.annotation = annotation
        }
        
        return annotationView
    }
    
    func mapView(_ mapView: MKMapView, annotationView view: MKAnnotationView, calloutAccessoryControlTapped control: UIControl) {
        let annotation = view.annotation as! EventAnnotation
        interactor!.event = events[annotation.id]
        self.performSegue(withIdentifier: "EventDetail", sender: self)
    }
}

extension MapViewController : UISearchBarDelegate {
    
    func searchBarSearchButtonClicked(_ searchBar: UISearchBar) {
        searchBar.resignFirstResponder()
        events = [:]
        map.removeAnnotations(map.annotations)
        search()
    }
}
