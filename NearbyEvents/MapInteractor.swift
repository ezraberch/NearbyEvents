//
//  MapInteractor.swift
//  NearbyEvents
//
//  Created by Ezra Berch on 12/31/18.
//  Copyright (c) 2018 Ezra Berch. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MapBusinessLogic
{
    func configureMap(request: Map.ConfigureMap.Request)
    func getEvents(request: Map.GetEvents.Request)
    var event: Event? { get set }
}

protocol MapDataStore
{
    var event: Event? { get set }
}

class MapInteractor: MapBusinessLogic, MapDataStore
{
    var event: Event?
    
    var presenter: MapPresentationLogic?
    var worker: MapWorker?
    //var name: String = ""
    
    // MARK: Do something
    
    func configureMap(request: Map.ConfigureMap.Request)
    {
        worker = MapWorker()
        worker?.configureMap() { response in
            self.presenter?.presentMapConfig(response: response)
        }
    }
    
    func getEvents(request: Map.GetEvents.Request) {
        EventfulWorker.eventSearch(latitude: request.latitude, longitude: request.longitude, miles:request.miles, search:request.search) {result in
            switch result {
                case .success(let event):
                    if event.events != nil {
                        let response = Map.GetEvents.Response(events: event.events!.event, error: false)
                        self.presenter?.presentEvents(response: response)
                    } else {
                        let response = Map.GetEvents.Response(events: nil, error: false)
                        self.presenter?.presentEvents(response: response)
                }
                case .failure(let error):
                    print(error.localizedDescription)
                    let response = Map.GetEvents.Response(events: nil, error: true)
                    self.presenter?.presentEvents(response: response)
            }
        }
    }
}
